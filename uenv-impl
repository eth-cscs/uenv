#!/usr/bin/python3

# --- A note about the shebang ---
# It is hard-coded to /usr/bin/python3 instead of "/usr/bin/env python3" so that the
# same python3 is always used, instead of using a version of python3 that might be
# loaded into the environment.

import argparse
import json
import os
import pathlib
import sys
import subprocess

VERSION="0.1-dev"
shell_noop=" :"

def make_argparser():
    parser = argparse.ArgumentParser()
    parser.add_argument("--no-color", action="store_true")
    parser.add_argument("--verbose", action="store_true")
    subparsers = parser.add_subparsers(dest="command")

    start_parser = subparsers.add_parser("start",
            help="start a user environment")
    start_parser.add_argument("image",
            help="the environment image to start")

    stop_parser = subparsers.add_parser("stop",
            help="stop a running user environment")

    status_parser = subparsers.add_parser("status",
            help="print information about running environments")

    modules_parser = subparsers.add_parser("modules",
            help="use modules if they are available")
    modules_parser.add_argument("--use",
            action="store_true", help="use modules if available")

    views_parser = subparsers.add_parser("view",
            help="activate a view")
    views_parser.add_argument("view_name",
            help="the name of the view to load")

    return parser

###############################################################################
# Utility functions for string handling, printing, etc.
###############################################################################

# Choose whether to use colored output.
# - by default colored output is ON
# - if the flag --no-color is passed it is OFF
# - if the environment variable NO_COLOR is set it is OFF
def use_colored_output(cli_arg):
    # The --no-color argument overrides all environment variables if passed.
    if cli_arg:
        return False

    # Check the env. var NO_COLOR and disable color if set.
    if os.environ.get('NO_COLOR') is not None:
        color_var = os.environ.get('NO_COLOR')
        if len(color_var)>0 and color_var != "0":
            return False

    return True

def colorize(string, color):
    colors = {
        "red":     "31",
        "green":   "32",
        "yellow":  "33",
        "blue":    "34",
        "magenta": "35",
        "cyan":    "36",
        "white":   "37",
    }
    if colored_output:
        return f"\033[1;{colors[color]}m{string}\033[0m"
    else:
        return string

def print_error(msg):
    print(f"{colorize('[error]', 'red')} {msg}", file=sys.stderr)

def print_warning(msg):
    print(f"{colorize('[warning]', 'yellow')} {msg}", file=sys.stderr)

def print_debug(msg):
    if verbose:
        print(f"{colorize('[info]', 'cyan')} {msg}", file=sys.stderr)

def echo_from_lines(lines):
    return [("echo '" + line + "'") for line in lines]

def strip_image_prefix(s):
    prefix = "file://"
    if s.startswith(prefix):
        return s[len(prefix):]
    return s

# inspect the output of "squasfs-mount --version"
# return the minor version, e.g. 0.5 returns 5
def get_uenv_version():
    try:
        result = subprocess.run(
                    ['squashfs-mount', '--version'],
                    stdout=subprocess.PIPE,
                    check=True)
        version = result.stdout.decode('utf-8')
        # remove dev strings like `-dev`
        version = version.split('-')[0]
        digit = int(version.split('.')[1])
        return digit
    except:
        return None

###############################################################################
# Types that read and represent uenv status
###############################################################################

class environment:
    """
    Represents the state the global uenv environment.
    """
    def __init__(self):
        self._uenv_version = get_uenv_version()

        self._status = self.load_status()

        self._uenvs = []

        # test for the original mount method
        if ("UENV_MOUNT_FILE" in os.environ) and ("UENV_MOUNT_POINT" in os.environ):
            mnt = os.environ.get("UENV_MOUNT_POINT")

            # TODO: check whether an image has been mounted at UENV_MOUNT_POINT?
            #   findmnt -n --mountpoint /user-environment
            # should return something like:
            #   /user-environment /dev/loop12 squashfs ro,nosuid,nodev,relatime
            self._uenvs = [uenv(pathlib.Path(mnt))]

        # test for the multi-mount method
        elif "UENV_MOUNT_LIST" in os.environ:
            # take care to strip white space and trailing commas
            raw = os.environ.get("UENV_MOUNT_LIST").strip().strip(',')
            mounts = raw.split(',')
            for m in mounts:
                # remove 'file://' prefix from string.
                m = strip_image_prefix(m)
                img, mnt = m.split(":")
                self._uenvs.append(uenv(pathlib.Path(mnt)))

    # TODO: these need to parse env variables for multi-mount points
    # TODO: make these work using new and old API
    def load_status(self):
        modules = None
        if os.environ.get('UENV_MODULE_PATH') is not None:
            modules = os.environ.get('UENV_MODULE_PATH')

        view = None
        if os.environ.get('UENV_VIEW') is not None:
            view = os.environ.get('UENV_VIEW')

        vcluster = None
        if os.environ.get('CLUSTER_NAME') is not None:
            system = os.environ.get('CLUSTER_NAME')

        return {"modules": modules, "view": view, "vcluster": vcluster}

    @property
    def uenvs(self):
        return self._uenvs

    @property
    def active(self):
        """true if one or more uenv has been mounted"""
        return len(self._uenvs)>0

    @property
    def modules_loaded(self):
        """true if the modules have been activated"""
        return self._status["modules"] is not None

    @property
    def loaded_view(self):
        """the loaded view, if any"""
        return self._status["view"]

    @property
    def vcluster(self):
        """the loaded view, if any"""
        return self._status["vcluster"]

    @property
    def has_squashfs_mount(self):
        return self._uenv_version is not None

    @property
    def old_api(self):
        return self._uenv_version < 5

class uenv:
    """
    Represents the state of a loaded environment.

    Initialised with the path where the environment is mounted.
    """

    def __init__(self, path):
        self._image =  self.load_image(path)
        if not self.is_native_mounted:
            print_warning(f"The uenv mounted at {self.mount} is mounted at {self.native_mount}.")
            print_warning(f"Features like modules and views will be be disabled.")

    @property
    def is_native_mounted(self):
        return self.native_mount == self.mount

    def load_image(self, path):
        """return information (if any) about the image mounted at path"""
        empty_image = {"mount": path, "uenv": None}

        if not path.is_dir():
            return empty_image

        meta_path = path / "meta"
        env_file = meta_path / "env.json"

        if env_file.is_file():
            with env_file.open('r') as fid:
                try:
                    env = json.load(fid)
                    return {"mount": path, "uenv": env}
                except:
                    print_error(f"unable to read environment configuration {env_file}")
                    return empty_image

        print_warning(f"the environment mounted at {meta_path} has no configuration {env_file}")
        return empty_image

    @property
    def native_mount(self):
        """the mount point that the image was built for"""

        # no uenv - return the real mount point
        if not self.is_uenv:
            return self.mount

        # check whether the mount point is explicitly in the image meta
        mnt = self._image["uenv"].get("mount", None)

        if mnt is not None:
            return mnt

        # TODO: deprecate the below as soon as images are generated with "mount" information.

        # check whether it can be inferred from a view path
        for e in self.views:
            return pathlib.Path(e["root"]).parents[1]

        # check whether it can be inferred from a module path
        if self.modules is not None:
            return pathlib.Path(self.modules).parents[0]

        # no mount information found, so assume that the actual mount point is valid.
        return self.mount

    @property
    def mount(self):
        """the mount point of the image"""
        return self._image["mount"]

    @property
    def is_uenv(self):
        """true if the mounted image provided meta data that describes a uenv"""
        return self._image["uenv"] is not None

    @property
    def modules(self):
        """the module path if modules are provided by the uenv"""
        if not self.is_uenv:
            return None
        m = self._image["uenv"].get("modules", None)
        if m is None:
            return None
        return m.get("root", None)

    @property
    def description(self):
        """description of the uenv"""
        if not self.is_uenv:
            return ""
        return self._image["uenv"].get("description", "")

    @property
    def name(self):
        """name of the uenv"""
        if not self.is_uenv:
            return "anonymous"
        return self._image["uenv"].get("name", "unamed")

    @property
    def views(self):
        """a list of views provided by the uenv"""
        if not self.is_uenv:
            return []

        vlist = self._image["uenv"].get("views", None)

        if vlist is None:
            return []

        views = []
        for name, info in vlist.items():
            views.append({
                "name": name,
                "activate": info["activate"],
                "description": info["description"],
                "root": info["root"]})

        return views

###############################################################################
# Functions that generate the string(s) that are eval'ed in the calling shell.
###############################################################################

# Generate the command that is passed back to the calling shell based on the
# command line arguments.
def generate_command(args):
    if args.command == "start":
        return generate_start_command(args)
    elif args.command == "stop":
        return generate_stop_command(args)
    elif args.command == "status":
        return generate_status_command(args)
    elif args.command == "view":
        return generate_view_command(args)
    elif args.command == "modules":
        return generate_modules_command(args)
    print_error(f"unknown command '{args.command}'")
    return " :"

"""
uenv start gromacs.squashfs,ddt.squashfs
uenv start gromacs.squashfs,ddt.squashfs:/tools
uenv start gromacs.squashfs:/user-environment,ddt.squashfs:/tools

ultimately:

uenv start gromacs:latest, ddt

Specifying what to mount will use some "special characters"
    the 2023 version of gromacs built for hoghant/a100 at /user-environment

    gromacs@2023/hohgant/a100:/user-environment
    |system=hohgant,arch=a100,gromacs:2023|/user-environment
    $SCRATCH/gromacs.squashfs:/user-environment
"""

def parse_image_description(desc):
    s = desc.split(':')
    if len(s)==1:
        return {"image": s[0], "mount": None}
    elif len(s)==2:
        return {"image": s[0], "mount": s[1]}
    return None

def parse_image_descriptions(s):
    """
    returns a list of {image, mount pairs} from the command line image argument
    to `uenv start`.

    when an error occurs, an error message is printed, and an empty list returned []
    """
    implicit_mounts = True
    mounts = []

    descriptions = s.split(',')
    num_images = len(descriptions)

    # TODO check for zero length input
    if num_images==0:
        print_error("No environment is provided")
        return []

    # inspect the first image
    img = parse_image_description(descriptions[0])
    if img is None:
        # handle error
        print_error(f"Invalid image description {descriptions[0]}")
        return []
    elif img["mount"] is None:
        img["mount"] = "/user-environment"
    else:
        implicit_mounts = False

    mounts.append(img)

    if num_images==1:
        return mounts

    # inspect the second image
    img = parse_image_description(descriptions[1])

    if img is None:
        # handle error
        print_error(f"Invalid image description {descriptions[1]}")
        return []
    elif img["mount"] is None:
        if implicit_mounts == True:
            img["mount"] = "/user-tools"
        else:
            print_error(f"missing mount point in '{descriptions[1]}'")
            return []

    implicit_mounts = False
    mounts.append(img)

    for d in descriptions[2:]:
        img = parse_image_description(d)

        if img is None:
            print_error(f"Invalid image description '{d}'")
            return []
        if img["mount"] is None:
            print_error(f"missing mount point in '{d}'")
            return []

        mounts.append(img)

    print_debug(f'parse_image_descriptions: {mounts}')

    return mounts


def generate_start_command(args):
    env = environment()
    if env.active:
        print_error(f'a uenv is already running')
        return shell_noop

    mounts=parse_image_descriptions(args.image)

    # TODO: if using single-mount API do it is an error for >1 images to be mounted

    # TODO: different paths for new and old API

    mount_pairs = []
    for m in mounts:
        img_path = pathlib.Path(m["image"])
        if not img_path.is_absolute():
            img_path = pathlib.Path.cwd() / img_path
        if not img_path.is_file():
            print_error(f"the user environment {colorize(img_path, 'white')} does not exist")
            return shell_noop

        mnt_path = pathlib.Path(m["mount"])
        if not mnt_path.is_absolute():
            mnt_path = pathlib.Path.cwd() / mnt_path
        if not mnt_path.is_dir():
            print_error(f"the mount point {colorize(mnt_path, 'white')} does not exist")
            return shell_noop

        mount_pairs.append(f"{img_path}:{mnt_path}")

    mount_string = ' '.join(mount_pairs)

    return f"squashfs-mount {mount_string} -- bash"

def generate_modules_command(args):
    env = environment()

    if not env.active:
        print_error(f'there is no environment loaded')
        return shell_noop

    uenv = env.uenvs[0]

    if not args.use:
        if env.modules_loaded:
            return "echo 'modules are activated: use \"module avail\" to view available modules'"
        elif uenv.modules is not None:
            return "echo 'modules are not activated: activate with \"uenv modules --use\"'"
        else:
            return "echo 'this uenv does not provide modules'"
    else:
        if env.old_api:
            if uenv.modules is None:
                print_error(f'the environment provides no modules')
                return shell_noop
            else:
                return [f"module use {uenv.modules}",
                        f"export UENV_MODULE_PATH={uenv.modules}",]
        else:
            # loop over the uenvs
            modulepaths=[]
            for e in env.uenvs:
                if e.modules is not None:
                    if e.is_native_mounted:
                        modulepaths.append(e.modules)
                    else:
                        print_debug(f"skipping modules for {e.mount} as it is not mounted at {e.native_mount}.")
            if len(modulepaths)==0:
                print_error(f'the environments provide no modules')
                return shell_noop
            modulecmds = []
            for p in modulepaths:
                modulecmds.append(f"module use {p}")
            modulecmds.append(f"export UENV_MODULE_PATH={','.join(modulepaths)}")
            return modulecmds


    return shell_noop

def generate_view_command(args):
    env = environment()

    if not env.active:
        print_error(f'there is no environment loaded')
        return shell_noop

    if env.loaded_view is not None:
        print_error(f'a view is already loaded: {env.loaded_view}')
        return shell_noop

    uenv = env.uenvs[0]
    name = args.view_name

    print_debug(f"trying to load view {name} in env loaded at {uenv.mount}")

    available_views = [v["name"] for v in uenv.views]
    if name in available_views:
        i = available_views.index(name)
        path = uenv.views[i]['activate']
        return [f"source '{path}'",
                f"export UENV_VIEW={name}",]
    else:
        print_error(f'the view "{name}" is not one of the available views: {available_views}')

    return shell_noop

def generate_status_command(args):
    env = environment()
    num_env = len(env.uenvs)
    if not env.active:
        return echo_from_lines(["no user environment"])

    lines = []
    first = True

    for uenv in env.uenvs:
        if not first:
            lines.append("")

        if not uenv.is_uenv:
            lines.append(f"{colorize(uenv.mount, 'cyan')}")
            lines.append(f"  anonymous environment with no meta data")
        else:
            name = uenv.name
            description = uenv.description
            lines.append(f"{colorize(uenv.mount, 'cyan')}:{colorize(uenv.name, 'yellow')}")
            if len(description.strip()) == 0:
                lines.append(f"  no description")
            else:
                lines.append(f"  {description}")
            if not uenv.is_native_mounted:
                lines.append(f"  {colorize('warning', 'red')}: mount the image at {uenv.native_mount} to use views and modules")
            else:
                modules_provided = uenv.modules is not None
                if env.modules_loaded:
                    lines.append(f"  modules: {colorize('loaded', 'yellow')}")
                elif modules_provided:
                    lines.append(f"  modules: available")
                else:
                    lines.append(f"  modules: no modules available")

                loaded_view = env.loaded_view
                views = uenv.views
                if len(views)==0:
                    lines.append("  views: no views available")
                else:
                    lines.append("  views:")
                    for v in views:
                        name = v["name"]
                        if name == loaded_view:
                            name += f" {colorize('(loaded)', 'yellow')}"

                        description = v["description"]
                        if description != "":
                            description = ": " + description

                        lines.append(f"    {name}{description}")

        first = False

    return echo_from_lines(lines)

def generate_stop_command(args):
    env = environment()

    if not env.active:
        print_error(f"there is no running environment to stop")
        return shell_noop

    return "exit 0"


if __name__ == "__main__":
    parser = make_argparser()
    args = parser.parse_args()

    global colored_output
    colored_output = use_colored_output(args.no_color)

    global verbose
    verbose = args.verbose

    cmd = generate_command(args)

    if type(cmd) is str:
        cmd = [cmd]
    for c in cmd:
        print(c)
