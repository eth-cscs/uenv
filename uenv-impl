#!/usr/bin/python3

# --- A note about the shebang ---
# It is hard-coded to /usr/bin/python3 instead of "/usr/bin/env python3" so that the
# same python3 is always used, instead of using a version of python3 that might be
# loaded into the environment.

import argparse
import json
import os
import pathlib
import sys
import subprocess
import textwrap
from packaging.version import Version

prefix = pathlib.Path(__file__).parent.resolve()
libpath = prefix / 'lib'
sys.path = [libpath.as_posix()] + sys.path

import alps
import datastore
import envvars as ev
import names
import record
import terminal
from terminal import colorize

VERSION="@@version@@"

shell_noop=" :"
shell_error="local _exitcode=1"

def make_argparser():
    parser = argparse.ArgumentParser(
            prog="uenv",
            formatter_class=argparse.RawDescriptionHelpFormatter,
            description=textwrap.dedent(
f"""\
Interact, manage and query with CSCS uenv.

For more information on how to use individual commands use the --help flag.

{colorize("Example", "blue")}: get help on the start command
    {colorize("uenv start --help", "white")}
"""
                ))
    parser.add_argument("--no-color", action="store_true", help="disable color output")
    parser.add_argument("--verbose", action="store_true", help="verbose output for debugging")
    parser.add_argument("-r", "--repo",
            required=False, default=None, type=str,
            help="The path on the local filesystem where uenv are managed. By default the environment variable UENV_REPO_PATH is used, if set, otherwise $SCRATCH/.uenv-images is used if the SCRATCH environment variable is set. This option will override these defaults, and must be set if neither of the defaults is set.")

    subparsers = parser.add_subparsers(dest="command")

    #### run
    run_parser = subparsers.add_parser("run",
            help="run a command in a user environment",
            formatter_class=argparse.RawDescriptionHelpFormatter,
            epilog=textwrap.dedent(
f"""\
Run a command in an environment.

{colorize("Example", "blue")} - run the script job.sh in an evironmnent:
    {colorize("uenv run prgenv-gnu/24.2:v1 -- ./job.sh", "white")}
This will mount prgenv-gnu, execute job.sh, then return to the calling shell.
Note how the command to execute comes after the two dashes '--'.

{colorize("Example", "blue")} - run the script job.sh in an evironmnent with a view loaded:
    {colorize("uenv run prgenv-gnu/24.2:v1 --view=default -- ./job.sh", "white")}

{colorize("Note", "cyan")} - the spec must uniquely identify the uenv. To ensure this, always use a
fully qualified spec in the form of name/version:tag, the unique 16 digit id,
or sha256 of a uenv. If more than one uenv match the spec, an error message
is printed.

{colorize("Example", "blue")} - run the job.sh script with two images mounted:
    {colorize("uenv run prgenv-gnu/24.2:v1 ddt/23.1 -- ./job.sh", "white")}
By default the images will be mounted at /user-environment and /user-tools in
that order.

{colorize("Example", "blue")} - run the job.sh script with two images mounted at specific mount points:
    {colorize("uenv run prgenv-gnu/24.2:v1:$SCRATCH/pe ddt/23.1:/user-tools -- ./job.sh", "white")}
Here the mount point for each image is specified using a ":".

{colorize("Note", "cyan")} - uenv must be mounted at the mount point for which they were built.
If mounted at the wrong location, a warning message will be printed, and
views will be disabled.

{colorize("Example", "blue")} - the run command can be used to execute workflow steps with
separate environments:
    {colorize("uenv run gromacs/23.1  -- ./simulation.sh", "white")}
    {colorize("uenv run paraview/5.11 -- ./render.sh", "white")}
"""
                ))
    run_parser.add_argument("-a", "--uarch",
                             help="The micro-architecture (uarch) to target. May be required to disambiguate uenv on systems with more than one node uarch. Available options are zen2, zen3, a100, mi200, gh200.",
                             required=False, type=str)
    run_parser.add_argument("-v", "--view",
                             help="The name of the environment view to activate when the uenv is started.",
                             required=False, type=str)
    run_parser.add_argument("runline", nargs=argparse.REMAINDER, type=str)

    #### start
    start_parser = subparsers.add_parser("start",
            help="start a user environmentRun a command in an environment.",
            formatter_class=argparse.RawDescriptionHelpFormatter,
            epilog=textwrap.dedent(
f"""\
{colorize("Example", "blue")} - start a uenv:
    {colorize("uenv start prgenv-gnu/24.2:v1", "white")}
This will mount prgenv-gnu at /user-environment, and start a new shell.

{colorize("Example", "blue")} - start a uenv with a view loaded:
    {colorize("uenv start prgenv-gnu/24.2:v1 --view=default", "white")}
Mount prgenv-gnu at /user-environment, and start a new shell with the view named "default" activated.

{colorize("Note", "cyan")} - the spec must uniquely identify the uenv. To ensure this, always use a
fully qualified spec in the form of name/version:tag, the unique 16 digit id,
or sha256 of a uenv. If more than one uenv match the spec, an error message
is printed.

{colorize("Note", "cyan")} - to check whether the environment has been started, and which options
it provides, run the command {colorize('uenv status', 'white')} after starting it.

{colorize("Example", "blue")} - start a session with with two images mounted:
    {colorize("uenv start prgenv-gnu/24.2:v1 ddt/23.1", "white")}
By default the images will be mounted at /user-environment and /user-tools in
that order.

{colorize("Example", "blue")} - start a session with two images mounted at specific mount points:
    {colorize("uenv start prgenv-gnu/24.2:v1:$SCRATCH/pe ddt/23.1:/user-tools", "white")}
Here the mount point for each image is specified using a ":".

{colorize("Note", "cyan")} - uenv must be mounted at the mount point for which they were built.
If mounted at the wrong location, a warning message will be printed, and
features like views will be disabled.
"""
                 ))
    start_parser.add_argument("-a", "--uarch",
                             help="The micro-architecture (uarch) to target. May be required to disambiguate uenv on systems with more than one node uarch. Available options are zen2, zen3, a100, mi200, gh200.",
                             required=False, type=str)
    start_parser.add_argument("-v", "--view",
                             help="The name of the environment view to activate when the uenv is started.",
                             required=False, type=str)
    start_parser.add_argument("image", nargs='+', type=str,
            help="the uenv to start")

    #### stop
    stop_parser = subparsers.add_parser("stop",
            help="stop a running uenv")

    #### status
    status_parser = subparsers.add_parser("status",
            help="print information about any loaded uenv")

    #### view
    views_parser = subparsers.add_parser("view",
            help="activate a view",
            formatter_class=argparse.RawDescriptionHelpFormatter,
            epilog=textwrap.dedent(
f"""\
{colorize("Example", "blue")} - print information about uenv views:
    {colorize("uenv view", "white")}
Prints information about the currently loaded view, otherwise information about
the available views will be printed.

{colorize("Example", "blue")} - load the file system view named develop:
    {colorize("uenv view develop", "white")}

{colorize("Example", "blue")} - load the file system view {colorize('default','cyan')} provided by the loaded uenv {colorize('prgenv-gnu','cyan')}:
    {colorize("uenv view prgenv-gnu:default", "white")}

{colorize("Note", "cyan")} - only one file system view can be loaded at a time.

{colorize("Example", "blue")} - output the environment variables that would be
set without loading the view:
    {colorize("uenv view --json develop", "white")}
"""
            ))
    views_parser.add_argument("view_name",
            nargs='?',
            default=None,
            help="the view to load")
    views_parser.add_argument("--json",
            help="Output the environment variable changes as json.",
            action="store_true")

    #### image
    # Dummy sub-parser to print out the correct help when wrong keyword is used
    # This is never used since "uenv image" commands are forwarded to "uenv-image"
    _ = subparsers.add_parser("image", help="Manage and query uenv images.")

    return parser

###############################################################################
# Utility functions for string handling, printing, etc.
###############################################################################

def echo_from_lines(lines):
    return [("echo '" + line + "'") for line in lines]

def strip_image_prefix(s):
    prefix = "file://"
    if s.startswith(prefix):
        return s[len(prefix):]
    return s

# inspect the output of "squashfs-mount --version"
# return the minor version, e.g. 0.5 returns 5
def get_uenv_version():
    try:
        result = subprocess.run(
                    ['squashfs-mount', '--version'],
                    stdout=subprocess.PIPE,
                    check=True)
        version = result.stdout.decode('utf-8')
        return Version(version)
    except:
        return None

def parse_uenv_view(desc):
    views = []
    for v in desc.split(','):
        mount, uenv, name = v.split(':')
        views.append({"path": pathlib.Path(mount), "uenv": uenv, "name": name})
    return views

###############################################################################
# Types that read and represent uenv status
###############################################################################

class environment:
    """
    Represents the state the global uenv environment.
    """
    def __init__(self):
        self._uenv_version = get_uenv_version()

        self._status = self.load_status()

        self._uenvs = []

        # test for the multi-mount method
        if "UENV_MOUNT_LIST" in os.environ:
            # take care to strip white space and trailing commas
            raw = os.environ.get("UENV_MOUNT_LIST").strip().strip(',')
            # if UENV_MOUNT_LIST is set and empty, ignore it
            if len(raw)>0:
                mounts = raw.split(',')
                for m in mounts:
                    # remove 'file://' prefix from string.
                    m = strip_image_prefix(m)
                    img, mnt = m.split(":")
                    self._uenvs.append(uenv(pathlib.Path(mnt)))

        # test for the original mount method
        elif ("UENV_MOUNT_FILE" in os.environ) and ("UENV_MOUNT_POINT" in os.environ):
            mnt = os.environ.get("UENV_MOUNT_POINT")

            self._uenvs = [uenv(pathlib.Path(mnt))]

        # TODO: check whether an image has been mounted at each _uenv[]
        #   findmnt -n --mountpoint /user-environment
        #   findmnt -n --mountpoint {str(_uenv[i]).mount}
        # should return something like:
        #   /user-environment /dev/loop12 squashfs ro,nosuid,nodev,relatime


    # Read environment variables set by previous calls to uenv, that record which views have been loaded.
    # Additionally read the vcluster name, if set.
    def load_status(self):
        view = None
        if os.environ.get('UENV_VIEW') is not None:
            view = parse_uenv_view(os.environ.get('UENV_VIEW'))

        vcluster = None
        if os.environ.get('CLUSTER_NAME') is not None:
            system = os.environ.get('CLUSTER_NAME')

        return {"view": view, "vcluster": vcluster}

    @property
    def uenvs(self):
        return self._uenvs

    @property
    def active(self):
        """true if one or more uenv has been mounted"""
        return len(self._uenvs)>0

    @property
    def loaded_view(self):
        """the loaded view, if any"""
        return self._status["view"]

    @property
    def vcluster(self):
        """the loaded view, if any"""
        return self._status["vcluster"]

    @property
    def has_squashfs_mount(self):
        return self._uenv_version is not None

    # true if the squashfs-mount utility is too old for this version of uenv.
    @property
    def old_api(self):
        return (not self.has_squashfs_mount) or (self._uenv_version < Version("0.5"))

class uenv:
    """
    Represents the state of a loaded environment.

    Initialised with the path where the environment is mounted.
    """

    def __init__(self, path):
        self._image =  self.load_image(path)
        self.native_mount = self.get_native_mount()

        if not self.is_native_mounted:
            terminal.warning(f"The uenv mounted at {self.mount} should be mounted at {self.native_mount}.")
            terminal.warning(f"Features like views will be be disabled.")

    def load_image(self, path):
        """return information (if any) about the image mounted at path"""
        empty_image = {"mount": path, "uenv": None}

        if not path.is_dir():
            return empty_image

        meta_path = path / "meta"
        env_file = meta_path / "env.json"

        if env_file.is_file():
            with env_file.open('r') as fid:
                try:
                    env = json.load(fid)
                    return {"mount": path, "uenv": env}
                except:
                    terminal.error(f"unable to read environment configuration {env_file}", abort=False)
                    return empty_image

        terminal.warning(f"the environment mounted at {meta_path} has no configuration {env_file}")

        return empty_image

    def get_native_mount(self):
        """the mount point that the image was built for"""

        # no uenv - return the real mount point
        if not self.is_uenv:
            terminal.info(f"image at {self.mount} is not a uenv: setting native mount to {self.mount}")
            return self.mount

        # check whether the mount point is explicitly in the image meta
        mnt = self._image["uenv"].get("mount", None)

        if mnt is not None:
            terminal.info(f"image at {self.mount} has native mount {mnt} set in meta data")
            return pathlib.Path(mnt)

        # check whether it can be inferred from a view path
        for e in self.views:
            terminal.info(f"image at {self.mount} has native mount {pathlib.Path(e['root']).parents[1]} inferred from views")
            return pathlib.Path(e["root"]).parents[1]

        # no mount information found, so assume that the actual mount point is valid.
        terminal.info(f"image at {self.mount} has native mount {self.mount} assumed")
        return self.mount

    @property
    def is_native_mounted(self):
        return self.native_mount == self.mount

    @property
    def mount(self):
        """the mount point of the image"""
        return self._image["mount"]

    @property
    def is_uenv(self):
        """true if the mounted image provided meta data that describes a uenv"""
        return self._image["uenv"] is not None

    @property
    def description(self):
        """description of the uenv"""
        if not self.is_uenv:
            return ""
        return self._image["uenv"].get("description", "")

    @property
    def name(self):
        """name of the uenv"""
        if not self.is_uenv:
            return "anonymous"
        return self._image["uenv"].get("name", "unamed")

    @property
    def views(self):
        """a list of views provided by the uenv"""
        if not self.is_uenv:
            return []

        vlist = self._image["uenv"].get("views", None)

        if vlist is None:
            return []

        views = []
        for name, info in vlist.items():
            if "env" in info:
                if info["env"]["version"] != 1:
                    terminal.warning(f"this uenv image is too recent for uenv - please upgrade.")
                    return []
                views.append({
                    "name": name,
                    "activate": info["activate"],
                    "description": info["description"],
                    "root": info["root"],
                    "env": info["env"]["values"]})
            else:
                views.append({
                    "name": name,
                    "activate": info["activate"],
                    "description": info["description"],
                    "root": info["root"]})

        return views

    """
    Returns true if the provided name matches either the uenv name
    or the uenv mount point.

    Enables users to refer to an environment by its name or mount, e.g.
        uenv view gromacs:default
    or
        uenv view /user-environment:default
    """
    def matches_name(self, name):
        if self.name == name:
            return True
        if self.mount == pathlib.Path(name):
            return True
        return False

###############################################################################
# Functions that generate the string(s) that are eval'ed in the calling shell.
###############################################################################

# Generate the command that is passed back to the calling shell based on the
# command line arguments.
def generate_command(args, env_vars):
    env = environment()
    if env.old_api:
        terminal.error(f"the version of squashfs-mount on this system is too old.", abort=False)
        return shell_error

    if args.command == "run":
        return generate_run_command(args, env, env_vars)
    if args.command == "start":
        return generate_start_command(args, env, env_vars)
    elif args.command == "stop":
        return generate_stop_command(args, env)
    elif args.command == "status":
        return generate_status_command(args, env)
    elif args.command == "view":
        return generate_view_command(args, env, env_vars)
    elif args.command == "repo":
        return generate_repo_command(args, env, env_vars)

    terminal.error(f"unknown command '{args.command}'", abort=False)
    return shell_error

"""
uenv start gromacs.squashfs ddt.squashfs
uenv start gromacs.squashfs ddt.squashfs:/tools
uenv start gromacs.squashfs:/user-environment ddt.squashfs:/tools

ultimately:

uenv start gromacs/2023.1 ddt

Specifying what to mount will use some "special characters"
    the 2023 version of gromacs built for hoghant/a100 at /user-environment

    gromacs@2023/hohgant/a100:/user-environment
    |system=hohgant,arch=a100,gromacs:2023|/user-environment
    $SCRATCH/gromacs.squashfs:/user-environment

    name[/version][:tag][:mount]

    gromacs
        gromacs             None
    gromacs:/uenv
        gromacs             /uenv
    gromacs:uenv
        gromacs:uenv        None
    gromacs/5.0:uenv
        gromacs/5.0:uenv    None
    gromacs/5.0:uenv:/uenv
        gromacs/5.0:uenv    /uenv
    gromacs/5.0:/uenv
        gromacs/5.0         /uenv

    mount must always be an absolute path, so must start with '/'
"""

def parse_image_description(desc):
    s = desc.rsplit(':', 1)
    if len(s)==2 and s[1].startswith("/"):
        return {"image": s[0], "mount": s[1]}
    return {"image": desc, "mount": None}

def generate_image_pairs(mnt_list):
    """
    Returns a list of {image, mount pairs} from the command line image argument to:
    `uenv start [mnt_list]`.
    `uenv run [mnt_list] -- cmd`.

    when an error occurs, an error message is printed, and an empty list returned []
    """
    implicit_mounts = True
    mounts = []

    descriptions = mnt_list
    num_images = len(descriptions)

    # check for zero length input
    if num_images==0:
        terminal.error("No environment is provided", abort=False)
        return []

    # inspect the first image
    img = parse_image_description(descriptions[0])
    if img["mount"] is None:
        img["mount"] = "/user-environment"
    else:
        implicit_mounts = False

    mounts.append(img)

    if num_images==1:
        return mounts

    # inspect the second image
    img = parse_image_description(descriptions[1])
    if img["mount"] is None:
        if implicit_mounts == True:
            img["mount"] = "/user-tools"
        else:
            terminal.error(f"missing mount point in '{descriptions[1]}'", abort=False)
            return []

    mounts.append(img)

    for d in descriptions[2:]:
        img = parse_image_description(d)

        if img["mount"] is None:
            terminal.error(f"missing mount point in '{d}'", abort=False)
            return []

        mounts.append(img)

    return mounts

def parse_image_descriptions(mnt_list, repo, uarch):
    mounts = generate_image_pairs(mnt_list)

    mount_pairs = []
    for m in mounts:
        uenv = m["image"]
        terminal.info(f"requested mount {m['image']} at {m['mount']}")
        uenv_path = pathlib.PosixPath(uenv)
        if not uenv_path.is_file():
            terminal.info(f"no file matching description found")

            repo_path = alps.uenv_repo_path(repo)
            terminal.info(f"looking in the repository {repo_path}")

            img_filter = names.create_filter(uenv, require_complete=False)
            cluster = os.environ.get('CLUSTER_NAME')
            if cluster is not None:
                img_filter["system"] = cluster
            else:
                # make it a hard error if the target vCluster can't be determined
                terminal.error("the CLUSTER_NAME environment variable is not set", abort=False)
                return []

            if uarch is not None:
                img_filter["uarch"]  = uarch

            terminal.info(f"search filter {img_filter}")

            try:
                fscache = datastore.FileSystemRepo(repo_path)
            except datastore.RepoNotFoundError as err:
                terminal.error(f"""The local repository {repo_path} does not exist.
If this is your first time using uenv, a repo in the default location can be
created with this command:
  {colorize(f"uenv image repo", "white")}
If you want to create a repo in a custom location , provide the path as follows:
  {colorize("uenv image repo <repo_path>", "white")}
where {colorize("<repo_path>", "white")} is the desired location.
""", abort=False)
                return []
            except datastore.RepoDBError as err:
                terminal.error(f"""The local repository {repo_path} had a database error.
Please open a CSCS ticket, or contact the uenv dev team, with the command that created the error, and this full error message.
{str(err)}""", abort=False)
                return []
            result = fscache.database.find_records(**img_filter)

            if result.is_empty:
                terminal.error(f"no uenv matches the spec: {terminal.colorize(result.request, 'white')}", abort=False)
                return []

            if not result.is_unique_sha:
                message = result.ambiguous_request_message()
                terminal.error(message[0], abort=False)
                for line in message[1:]:
                    terminal.stderr(line)
                return []

            record = result.records[0]
            terminal.info(f"selected image {record} from repository  {repo_path}")

            uenv_path = fscache.image_path(record) + "/store.squashfs"
            terminal.info(f"lookup {uenv} returned {uenv_path}")
            terminal.info(f"loading {record}")
        else:
            uenv_path = uenv_path.resolve()

        mnt_path = pathlib.Path(m["mount"])
        if not mnt_path.is_dir():
            terminal.error(f"the mount point {colorize(mnt_path, 'white')} does not exist", abort=False)
            return []
        if not mnt_path.is_absolute():
            terminal.error(f"the mount point {colorize(mnt_path, 'white')} is a relative path", abort=False)
            return []

        mount_pairs.append(f"{uenv_path}:{mnt_path}")
        terminal.info(f"  mounting: {uenv_path}:{mnt_path}")

    return mount_pairs

def split_runline(args):
    images = []
    cmd = None
    cmdargs = []

    if any(a=="--" for a in args):
        dashpos=args.index("--")
        images = args[:dashpos]
        remainder = args[dashpos+1:]
        if len(remainder)>0:
            cmd = remainder[0]
            cmdargs = remainder[1:]
    else:
        images = args

    return images, cmd, cmdargs

def generate_run_command(args, env, env_vars):
    terminal.info(f"parsing run command with arguments: {args.command}")
    if env.active:
        terminal.error("a uenv is already loaded", abort=False)
        return shell_error

    images, cmd, cmdargs = split_runline(args.runline)

    terminal.info(f"images: {images}")
    terminal.info(f"cmd: {cmd}")
    terminal.info(f"cmdargs: {cmdargs}")

    mount_pairs=parse_image_descriptions(images, args.repo, args.uarch)
    if mount_pairs==[]:
        return shell_error

    mount_string = ' '.join(mount_pairs)
    cmdargs_string = ' '.join([f'"{arg}"' for arg in cmdargs])

    if args.view is not None:
        terminal.info(f"start with view {args.view}")
        env_vars.set_scalar("UENV_FORWARD_VIEW", args.view)

    # TODO: remove UENV_MOUNT_* variables when the slurm plugin on Balfrin/Tasna is updated
    main_mount=mount_pairs[0].split(":")
    env_vars.set_scalar("UENV_MOUNT_FILE", f"{main_mount[0]}")
    env_vars.set_scalar("UENV_MOUNT_POINT", f"{main_mount[1]}")

    return [f"squashfs-mount {mount_string} -- $UENV_WRAPPER_CMD {cmd} {cmdargs_string}",
            'local _exitcode=$?',]


def generate_start_command(args, env, env_vars):
    terminal.info(f"parsing start command with arguments: {args.image}")
    if env.active:
        terminal.error("a uenv is already loaded", abort=False)
        return shell_error

    mount_pairs=parse_image_descriptions(args.image, args.repo, args.uarch)
    if mount_pairs==[]:
        return shell_error

    mount_string = ' '.join(mount_pairs)

    if args.view is not None:
        terminal.info(f"enabling the view '{args.view}'")
        env_vars.set_scalar("UENV_FORWARD_VIEW", args.view)

    # TODO: remove UENV_MOUNT_* variables when the slurm plugin on Balfrin/Tasna is updated
    main_mount=mount_pairs[0].split(":")
    env_vars.set_scalar("UENV_MOUNT_FILE", f"{main_mount[0]}")
    env_vars.set_scalar("UENV_MOUNT_POINT", f"{main_mount[1]}")

    return [f"squashfs-mount {mount_string} -- $UENV_WRAPPER_CMD bash",
            "local _exitcode=$?",]

def generate_view_command(args, env, env_vars):

    if not env.active:
        terminal.error(f'there is no uenv loaded', abort=False)
        return shell_error

    # the requested view(s)
    request = args.view_name

    # build a list of all views that are provided by the mounted uenv
    available_views = []
    for uenv in env.uenvs:
        for name in [v["name"] for v in uenv.views]:
            available_views.append({"uenv": uenv.name, "name": name})

    terminal.info(f"available views: {available_views}")

    # A helper function that generates a help message to echo to the screen.
    def help_message(final_op=shell_noop):
        output = []
        if len(available_views)==0:
            output.append("echo 'no views are provided by the loaded uenv'")
        else:
            output.append("echo 'the following views are available:'")
            output.append("echo ''")
            # if only one uenv provides views, there is no need to disambiguate view names
            disambiguate = len(available_views)>1
            for v in available_views:
                uenv = v["uenv"]
                name = v["name"]
                output.append(f"echo '{colorize(uenv+':'+name, 'cyan')}'")
                command = f"uenv view {uenv}:{name}"
                output.append(f"echo '  {colorize(command, 'white')}'")

        output.append(final_op)

        return output

    # handle the case where `uenv view` is called with no further arguments
    # print status information and suggested commands before quitting without error
    if request is None:
        # handle the case that a view is already loaded
        loaded_views = env.loaded_view
        if loaded_views is not None:
            view_strings = [f"{v['uenv']}:{v['name']}" for v in loaded_views]
            if len(loaded_views)==1:
                return [f"echo 'the view {colorize(view_strings[0], 'cyan')} is loaded'",
                        shell_noop]
            else:
                return [f"echo 'the views {', '.join([colorize(s, 'cyan') for s in view_strings])} are loaded'",
                        shell_noop]

        else:
            return help_message(shell_noop)

    if env.loaded_view is not None:
        terminal.error(f"views are already loaded", abort=False)
        return shell_error

    requested_views = []
    for r in request.split(','):
        components = r.split(':')

        if len(components)==1:
            request = {"uenv": None, "name": components[0]}
        else:
            request = {"uenv": components[0], "name": components[1]}

        matches = [v for v in available_views if (request == v) or (request["uenv"] is None and request["name"]==v["name"])]

        if len(matches)>1:
                terminal.error(f'the view "{r}" is provided by {[e["name"] for e in matches]}. Use "uenv view" to see the available options.', abort=False)
                return help_message(shell_error)
        elif len(matches)==0:
            terminal.error(f'the view "{r}" is not available', abort=False)
            return help_message(shell_error)

        terminal.info(f"found compatible view: {request} -> {matches[0]}")
        requested_views.append(matches[0])

    uenv_view_strings_long = []
    uenv_view_strings_short = []
    for request in requested_views:
        uenv = next((u for u in env.uenvs if u.name==request["uenv"]))
        view_meta = next((v for v in uenv.views if v["name"]==request["name"]))

        # check whether the view provides environment variable information
        terminal.info(f"loading the view: {view_meta}")
        if "env" in view_meta:
            terminal.info(f"the image provides environment variable meta data")
            env_vars.update(ev.read_dictionary(view_meta["env"]))
            terminal.info(f"{env_vars}")
        # else use the raw activate.sh
        else:
            path = view_meta['activate']
            terminal.info(f"full path for view activation script: '{path}'")
            env_vars.update(ev.read_activation_script(path))
        uenv_view_strings_long.append(f"{uenv.mount}:{uenv.name}:{request['name']}")
        uenv_view_strings_short.append(f"{uenv.name}:{request['name']}")

    env_vars.set_scalar("UENV_VIEW", ",".join(uenv_view_strings_long))

    env_vars.set_post(False)

    if args.json:
        terminal.info(f"outputing variables in JSON format")
        json_string = env_vars.json()
        env_vars.clear()
        return [f"echo '{json_string}'"]

    qualified_view_name = " ".join(uenv_view_strings_short)
    return [f"echo 'loading the view{'s' if len(requested_views)>1 else ''} {colorize(qualified_view_name, 'cyan')}'"]

def generate_status_command(args, env):
    num_env = len(env.uenvs)
    if not env.active:
        return echo_from_lines(["there is no uenv loaded"])

    lines = []
    first = True

    loaded_views = env.loaded_view
    if loaded_views is None:
        loaded_views = []
    terminal.info(f"loaded views: {loaded_views}")

    for uenv in env.uenvs:
        if not first:
            lines.append("")

        if not uenv.is_uenv:
            lines.append(f"{colorize(uenv.mount, 'cyan')}")
            lines.append(f"  anonymous environment with no meta data")
        else:
            name = uenv.name
            description = uenv.description or ""
            lines.append(f"{colorize(uenv.mount, 'cyan')}:{colorize(uenv.name, 'white')}")
            if len(description.strip()) == 0:
                lines.append(f"  no description")
            else:
                lines.append(f"  {description}")
            if not uenv.is_native_mounted:
                lines.append(f"  {colorize('warning', 'yellow')}: mount the image at {uenv.native_mount} to use views")
            else:
                views = uenv.views
                view = None
                if len(views)==0:
                    lines.append("  views: no views available")
                else:
                    lines.append("  views:")
                    for v in views:
                        name = v["name"]
                        if {"path": uenv.mount, "uenv": uenv.name, "name": name} in loaded_views:
                            name += f" {colorize('(loaded)', 'yellow')}"

                        description = v["description"]
                        if description != "":
                            description = ": " + description

                        lines.append(f"    {name}{description}")

        first = False

    return echo_from_lines(lines)

def generate_stop_command(args, env):

    if not env.active:
        terminal.error(f"there is no running uenv to stop", abort=False)
        return shell_error

    return "exit $_last_exitcode"


if __name__ == "__main__":
    parser = make_argparser()
    args = parser.parse_args()

    # Generate error if the dummy 'image' parser is called by accident
    if args.command == "image":
        raise RuntimeError(
            "Something is wrong. 'image' sub-parser is a dummy parser. "
            "'image' commands should be forwarded to 'uenv-image'."
        )

    terminal.use_colored_output(args.no_color)

    if args.verbose:
        terminal.set_debug_level(2)

    env_vars = ev.EnvVarSet()
    cmd = generate_command(args, env_vars)

    env_var_cmds = env_vars.export(True)

    terminal.info(f"environment variables: {env_var_cmds}")

    if type(cmd) is str:
        cmd = [cmd]

    if len(env_var_cmds)>0:
        cmd = env_var_cmds["pre"] + cmd + env_var_cmds["post"]

    for c in cmd:
        print(c)
